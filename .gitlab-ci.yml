workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always
variables:
  # Public DNS
  APP_ENDPOINT: $DEPLOYMENT_SERVER_HOST

image: alpine:3.15.1
stages:
  - build
#  - deploy
.build:
  stage: build
  tags:
    - "shell"
    - "aws"
  variables:
    MICRO_SERVICE: ""
    SERVICE_VERSION: ""
  before_script:
    - export IMAGE_NAME=$CI_REGISTRY_IMAGE/frontend
    - export IMAGE_TAG=$SERVICE_VERSION
  script:
    - groups ec2-user
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG

#.deploy:
#  stage: deploy
#  tags:
#    - "docker"
#    - "aws"
#
#  before_script:
#    - chmod 400 $SSH_PRIVATE_KEY
#    - export IMAGE_NAME=$CI_REGISTRY_IMAGE/microservice/monorepo
#    - export IMAGE_TAG=1.0
#  script:
#    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yml ubuntu@$APP_ENDPOINT:/home/ubuntu
#    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ubuntu@$APP_ENDPOINT "
#      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
#
#      export DC_IMAGE_NAME=monorepo &&
#      export DC_IMAGE_TAG=$IMAGE_TAG &&
#      export DC_APP_PORT=$APP_PORT &&
#      export DC_MONGO_URL=$MONGO_URL &&
#
#      docker network create micro_service || true &&
#
#      docker-compose down &&
#      docker image remove registry.gitlab.com/alexanderkir1994/contracts-svc/microservice/monorepo:1.0 --force &&
#      docker-compose up -d"
#  environment:
#    name: development
#    url: $APP_ENDPOINT


build_frontend:
  extends: .build
  variables:
    MICRO_SERVICE: "monorepo"
    SERVICE_VERSION: "1.0"


#deploy_gateway:
#  extends: .deploy
#  variables:
#    APP_NAME: "gateway"




