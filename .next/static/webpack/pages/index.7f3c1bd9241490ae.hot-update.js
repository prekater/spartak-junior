/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[7].use[4]!./features/app/UI/AdviceAndTest/AdviceAndTest.module.scss":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[7].use[4]!./features/app/UI/AdviceAndTest/AdviceAndTest.module.scss ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".AdviceAndTest_root__wQ3WX {\\n  display: flex;\\n  position: relative;\\n  width: 100%;\\n  height: 450px;\\n  background-color: var(--bg-red);\\n}\\n.AdviceAndTest_root__wQ3WX::after {\\n  bottom: -180px;\\n  height: 214px;\\n  z-index: 1;\\n}\\n@media (max-width: 479px) {\\n  .AdviceAndTest_root__wQ3WX {\\n    height: min-content;\\n  }\\n}\\n\\n.AdviceAndTest_wrapper__plcsR {\\n  display: flex;\\n  align-items: center;\\n  padding-left: 20px;\\n}\\n@media (max-width: 479px) {\\n  .AdviceAndTest_wrapper__plcsR {\\n    padding-left: 0;\\n    flex-direction: column;\\n    justify-content: center;\\n  }\\n}\\n\\n.AdviceAndTest_contentAbout__8VjeW {\\n  position: relative;\\n  width: 550px;\\n  padding-bottom: 20px;\\n  z-index: 2;\\n}\\n@media (max-width: 959px) {\\n  .AdviceAndTest_contentAbout__8VjeW {\\n    margin-left: 10%;\\n    width: 390px;\\n  }\\n}\\n@media (max-width: 639px) {\\n  .AdviceAndTest_contentAbout__8VjeW {\\n    width: 370px;\\n  }\\n}\\n@media (max-width: 479px) {\\n  .AdviceAndTest_contentAbout__8VjeW {\\n    margin-left: 0;\\n    width: 300px;\\n    padding-bottom: 40px;\\n  }\\n}\\n\\n.AdviceAndTest_contentBanner__tCSpb {\\n  position: absolute;\\n  top: -64px;\\n  left: 420px;\\n  width: 800px;\\n  height: 513px;\\n  z-index: 1;\\n  object-fit: cover;\\n}\\n.AdviceAndTest_contentBanner__tCSpb::after {\\n  content: \\\"\\\";\\n  z-index: -1;\\n  display: block;\\n  position: absolute;\\n  bottom: 0;\\n  right: 0;\\n  left: 0;\\n  width: 80%;\\n  height: 80%;\\n  margin: 0 auto;\\n  background: var(--bg-gradient);\\n}\\n@media (max-width: 959px) {\\n  .AdviceAndTest_contentBanner__tCSpb {\\n    left: 360px;\\n  }\\n}\\n@media (max-width: 639px) {\\n  .AdviceAndTest_contentBanner__tCSpb {\\n    left: 340px;\\n  }\\n}\\n@media (max-width: 479px) {\\n  .AdviceAndTest_contentBanner__tCSpb {\\n    position: relative;\\n    top: unset;\\n    left: unset;\\n    width: 390px;\\n    height: 250px;\\n  }\\n}\\n\\n.AdviceAndTest_title__qNeIE {\\n  font-size: 26px;\\n  line-height: 40px;\\n  font-weight: 600;\\n  color: var(--white);\\n  margin-bottom: 15px;\\n}\\n@media (max-width: 959px) {\\n  .AdviceAndTest_title__qNeIE {\\n    font-size: 24px;\\n    line-height: 34px;\\n  }\\n}\\n@media (max-width: 639px) {\\n  .AdviceAndTest_title__qNeIE {\\n    font-size: 22px;\\n    line-height: 31px;\\n  }\\n}\\n@media (max-width: 479px) {\\n  .AdviceAndTest_title__qNeIE {\\n    margin-bottom: 20px;\\n    margin-top: 55px;\\n    font-size: 20px;\\n    line-height: 28px;\\n    letter-spacing: 0.5px;\\n  }\\n}\\n\\n.AdviceAndTest_text__DDy4q {\\n  font-size: 18px;\\n  line-height: 28px;\\n  font-weight: 400;\\n  color: var(--white);\\n  margin-bottom: 40px;\\n}\\n@media (max-width: 959px) {\\n  .AdviceAndTest_text__DDy4q {\\n    font-size: 16px;\\n    line-height: 25px;\\n  }\\n}\\n\\n.AdviceAndTest_buttonModal__RFY2C {\\n  position: relative;\\n  display: flex;\\n  min-width: 260px;\\n  height: 55px;\\n  align-items: center;\\n  justify-content: center;\\n  padding: 15px 20px;\\n  border-radius: 30px;\\n  cursor: pointer;\\n  background-color: var(--white);\\n  font-size: 18px;\\n  font-weight: 600;\\n  text-transform: uppercase;\\n  color: var(--black-bold);\\n  box-shadow: 2px 3px 10px 1px rgba(0, 0, 0, 0.2);\\n  border-color: transparent;\\n  border-style: solid;\\n}\\n@media (max-width: 479px) {\\n  .AdviceAndTest_buttonModal__RFY2C {\\n    min-width: 300px;\\n  }\\n}\\n\\n.AdviceAndTest_roundArrow__YGajT {\\n  position: absolute;\\n  width: 70px;\\n  height: 70px;\\n  transform: rotate(0);\\n  left: 280px;\\n  bottom: 30px;\\n  object-fit: cover;\\n}\\n@media (max-width: 639px) {\\n  .AdviceAndTest_roundArrow__YGajT {\\n    right: -75px;\\n    transform: rotate(315deg);\\n  }\\n}\\n@media (max-width: 479px) {\\n  .AdviceAndTest_roundArrow__YGajT {\\n    width: 44px;\\n    height: 44px;\\n    bottom: 68px;\\n    right: 30px;\\n    transform: rotate(315deg);\\n  }\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://features/app/UI/AdviceAndTest/AdviceAndTest.module.scss\",\"webpack://node_modules/include-media/dist/_include-media.scss\"],\"names\":[],\"mappings\":\"AAEA;EACE,aAAA;EACA,kBAAA;EACA,WAAA;EACA,aAAA;EACA,+BAAA;AADF;AAGE;EACE,cAAA;EACA,aAAA;EACA,UAAA;AADJ;ACkiBI;ED3iBJ;IAcI,mBAAA;EADF;AACF;;AAIA;EACE,aAAA;EACA,mBAAA;EACA,kBAAA;AADF;ACuhBI;EDzhBJ;IAMI,eAAA;IACA,sBAAA;IACA,uBAAA;EAAF;AACF;;AAGA;EACE,kBAAA;EACA,YAAA;EACA,oBAAA;EACA,UAAA;AAAF;ACygBI;ED7gBJ;IAOI,gBAAA;IACA,YAAA;EACF;AACF;ACmgBI;ED7gBJ;IAYI,YAAA;EAEF;AACF;AC8fI;ED7gBJ;IAgBI,cAAA;IACA,YAAA;IACA,oBAAA;EAGF;AACF;;AAAA;EACE,kBAAA;EACA,UAAA;EACA,WAAA;EACA,YAAA;EACA,aAAA;EACA,UAAA;EACA,iBAAA;AAGF;AADE;EACE,WAAA;EACA,WAAA;EACA,cAAA;EACA,kBAAA;EACA,SAAA;EACA,QAAA;EACA,OAAA;EACA,UAAA;EACA,WAAA;EACA,cAAA;EACA,8BAAA;AAGJ;ACgeI;EDvfJ;IAwBI,WAAA;EAGF;AACF;AC2dI;EDvfJ;IA4BI,WAAA;EAIF;AACF;ACsdI;EDvfJ;IAgCI,kBAAA;IACA,UAAA;IACA,WAAA;IACA,YAAA;IACA,aAAA;EAKF;AACF;;AAFA;EACE,eAAA;EACA,iBAAA;EACA,gBAAA;EACA,mBAAA;EACA,mBAAA;AAKF;ACqcI;ED/cJ;IAQI,eAAA;IACA,iBAAA;EAMF;AACF;AC+bI;ED/cJ;IAaI,eAAA;IACA,iBAAA;EAOF;AACF;ACybI;ED/cJ;IAkBI,mBAAA;IACA,gBAAA;IACA,eAAA;IACA,iBAAA;IACA,qBAAA;EAQF;AACF;;AALA;EACE,eAAA;EACA,iBAAA;EACA,gBAAA;EACA,mBAAA;EACA,mBAAA;AAQF;ACwaI;EDrbJ;IAQI,eAAA;IACA,iBAAA;EASF;AACF;;AANA;EACE,kBAAA;EACA,aAAA;EACA,gBAAA;EACA,YAAA;EACA,mBAAA;EACA,uBAAA;EACA,kBAAA;EACA,mBAAA;EACA,eAAA;EACA,8BAAA;EACA,eAAA;EACA,gBAAA;EACA,yBAAA;EACA,wBAAA;EACA,+CAAA;EACA,yBAAA;EACA,mBAAA;AASF;AC8YI;EDxaJ;IAoBI,gBAAA;EAUF;AACF;;AAPA;EACE,kBAAA;EACA,WAAA;EACA,YAAA;EACA,oBAAA;EACA,WAAA;EACA,YAAA;EACA,iBAAA;AAUF;AC+XI;EDhZJ;IAUI,YAAA;IACA,yBAAA;EAWF;AACF;ACyXI;EDhZJ;IAeI,WAAA;IACA,YAAA;IACA,YAAA;IACA,WAAA;IACA,yBAAA;EAYF;AACF\",\"sourcesContent\":[\"@import 'shared/styles/breakpoints';\\r\\n\\r\\n.root {\\r\\n  display: flex;\\r\\n  position: relative;\\r\\n  width: 100%;\\r\\n  height: 450px;\\r\\n  background-color: var(--bg-red);\\r\\n\\r\\n  &::after {\\r\\n    bottom: -180px;\\r\\n    height: 214px;\\r\\n    z-index: 1;\\r\\n  }\\r\\n\\r\\n  @include media('<sm') {\\r\\n    height: min-content;\\r\\n  }\\r\\n}\\r\\n\\r\\n.wrapper {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  padding-left: 20px;\\r\\n\\r\\n  @include media('<sm') {\\r\\n    padding-left: 0;\\r\\n    flex-direction: column;\\r\\n    justify-content: center;\\r\\n  }\\r\\n}\\r\\n\\r\\n.contentAbout {\\r\\n  position: relative;\\r\\n  width: 550px;\\r\\n  padding-bottom: 20px;\\r\\n  z-index: 2;\\r\\n\\r\\n  @include media('<lg') {\\r\\n    margin-left: 10%;\\r\\n    width: 390px;\\r\\n  }\\r\\n\\r\\n  @include media('<md') {\\r\\n    width: 370px;\\r\\n  }\\r\\n\\r\\n  @include media('<sm') {\\r\\n    margin-left: 0;\\r\\n    width: 300px;\\r\\n    padding-bottom: 40px;\\r\\n  }\\r\\n}\\r\\n\\r\\n.contentBanner {\\r\\n  position: absolute;\\r\\n  top: -64px;\\r\\n  left: 420px;\\r\\n  width: 800px;\\r\\n  height: 513px;\\r\\n  z-index: 1;\\r\\n  object-fit: cover;\\r\\n\\r\\n  &::after {\\r\\n    content: '';\\r\\n    z-index: -1;\\r\\n    display: block;\\r\\n    position: absolute;\\r\\n    bottom: 0;\\r\\n    right: 0;\\r\\n    left: 0;\\r\\n    width: 80%;\\r\\n    height: 80%;\\r\\n    margin: 0 auto;\\r\\n    background: var(--bg-gradient);\\r\\n  }\\r\\n\\r\\n  @include media('<lg') {\\r\\n    left: 360px;\\r\\n  }\\r\\n\\r\\n  @include media('<md') {\\r\\n    left: 340px;\\r\\n  }\\r\\n\\r\\n  @include media('<sm') {\\r\\n    position: relative;\\r\\n    top: unset;\\r\\n    left: unset;\\r\\n    width: 390px;\\r\\n    height: 250px;\\r\\n  }\\r\\n}\\r\\n\\r\\n.title {\\r\\n  font-size: 26px;\\r\\n  line-height: 40px;\\r\\n  font-weight: 600;\\r\\n  color: var(--white);\\r\\n  margin-bottom: 15px;\\r\\n\\r\\n  @include media('<lg') {\\r\\n    font-size: 24px;\\r\\n    line-height: 34px;\\r\\n  }\\r\\n\\r\\n  @include media('<md') {\\r\\n    font-size: 22px;\\r\\n    line-height: 31px;\\r\\n  }\\r\\n\\r\\n  @include media('<sm') {\\r\\n    margin-bottom: 20px;\\r\\n    margin-top: 55px;\\r\\n    font-size: 20px;\\r\\n    line-height: 28px;\\r\\n    letter-spacing: 0.5px;\\r\\n  }\\r\\n}\\r\\n\\r\\n.text {\\r\\n  font-size: 18px;\\r\\n  line-height: 28px;\\r\\n  font-weight: 400;\\r\\n  color: var(--white);\\r\\n  margin-bottom: 40px;\\r\\n\\r\\n  @include media('<lg') {\\r\\n    font-size: 16px;\\r\\n    line-height: 25px;\\r\\n  }\\r\\n}\\r\\n\\r\\n.buttonModal {\\r\\n  position: relative;\\r\\n  display: flex;\\r\\n  min-width: 260px;\\r\\n  height: 55px;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n  padding: 15px 20px;\\r\\n  border-radius: 30px;\\r\\n  cursor: pointer;\\r\\n  background-color: var(--white);\\r\\n  font-size: 18px;\\r\\n  font-weight: 600;\\r\\n  text-transform: uppercase;\\r\\n  color: var(--black-bold);\\r\\n  box-shadow: 2px 3px 10px 1px rgba(0, 0, 0, 0.2);\\r\\n  border-color: transparent;\\r\\n  border-style: solid;\\r\\n\\r\\n  @include media('<sm') {\\r\\n    min-width: 300px;\\r\\n  }\\r\\n}\\r\\n\\r\\n.roundArrow {\\r\\n  position: absolute;\\r\\n  width: 70px;\\r\\n  height: 70px;\\r\\n  transform: rotate(0);\\r\\n  left: 280px;\\r\\n  bottom: 30px;\\r\\n  object-fit: cover;\\r\\n\\r\\n  @include media('<md') {\\r\\n    right: -75px;\\r\\n    transform: rotate(315deg);\\r\\n  }\\r\\n\\r\\n  @include media('<sm') {\\r\\n    width: 44px;\\r\\n    height: 44px;\\r\\n    bottom: 68px;\\r\\n    right: 30px;\\r\\n    transform: rotate(315deg);\\r\\n  }\\r\\n}\\r\\n\",\"@charset \\\"UTF-8\\\";\\n\\n//     _            _           _                           _ _\\n//    (_)          | |         | |                         | (_)\\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\\n//    | | '_ \\\\ / __| | | | |/ _` |/ _ \\\\ | '_ ` _ \\\\ / _ \\\\/ _` | |/ _` |\\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\\n//    |_|_| |_|\\\\___|_|\\\\__,_|\\\\__,_|\\\\___| |_| |_| |_|\\\\___|\\\\__,_|_|\\\\__,_|\\n//\\n//      Simple, elegant and maintainable media queries in Sass\\n//                        v1.4.9\\n//\\n//        https://eduardoboucas.github.io/include-media\\n//\\n//         Authors: Eduardo Boucas (@eduardoboucas)\\n//                  Kitty Giraudel (@kittygiraudel)\\n//\\n//      This project is licensed under the terms of the MIT license\\n////\\n/// include-media library public configuration\\n/// @author Eduardo Boucas\\n/// @access public\\n////\\n\\n\\n///\\n/// Creates a list of global breakpoints\\n///\\n/// @example scss - Creates a single breakpoint with the label `phone`\\n///  $breakpoints: ('phone': 320px);\\n///\\n$breakpoints: (\\n  'phone': 320px,\\n  'tablet': 768px,\\n  'desktop': 1024px\\n) !default;\\n\\n\\n///\\n/// Creates a list of static expressions or media types\\n///\\n/// @example scss - Creates a single media type (screen)\\n///  $media-expressions: ('screen': 'screen');\\n///\\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\\n///  $media-expressions: (\\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\\n///  );\\n///\\n$media-expressions: (\\n  'screen': 'screen',\\n  'print': 'print',\\n  'handheld': 'handheld',\\n  'landscape': '(orientation: landscape)',\\n  'portrait': '(orientation: portrait)',\\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\\n) !default;\\n\\n\\n///\\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\\n///\\n/// @example scss - Interval for pixels is defined as `1` by default\\n///  @include media('>128px') {}\\n///\\n///  /* Generates: */\\n///  @media (min-width: 129px) {}\\n///\\n/// @example scss - Interval for ems is defined as `0.01` by default\\n///  @include media('>20em') {}\\n///\\n///  /* Generates: */\\n///  @media (min-width: 20.01em) {}\\n///\\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\\n///  @include media('>2.0rem') {}\\n///\\n///  /* Generates: */\\n///  @media (min-width: 2.1rem) {}\\n///\\n$unit-intervals: (\\n  'px': 1,\\n  'em': 0.01,\\n  'rem': 0.1,\\n  '': 0\\n) !default;\\n\\n///\\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\\n/// for browsers that don't support media queries.\\n///\\n/// @example scss - Disables support for media queries\\n///  $im-media-support: false;\\n///  @include media('>=tablet') {\\n///    .foo {\\n///      color: tomato;\\n///    }\\n///  }\\n///\\n///  /* Generates: */\\n///  .foo {\\n///    color: tomato;\\n///  }\\n///\\n$im-media-support: true !default;\\n\\n///\\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\\n/// intercept the breakpoint will be displayed, any others will be ignored.\\n///\\n/// @example scss - This media query will show because it intercepts the static breakpoint\\n///  $im-media-support: false;\\n///  $im-no-media-breakpoint: 'desktop';\\n///  @include media('>=tablet') {\\n///    .foo {\\n///      color: tomato;\\n///    }\\n///  }\\n///\\n///  /* Generates: */\\n///  .foo {\\n///    color: tomato;\\n///  }\\n///\\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\\n///  $im-media-support: false;\\n///  $im-no-media-breakpoint: 'tablet';\\n///  @include media('>=desktop') {\\n///    .foo {\\n///      color: tomato;\\n///    }\\n///  }\\n///\\n///  /* No output */\\n///\\n$im-no-media-breakpoint: 'desktop' !default;\\n\\n///\\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\\n/// are not supported.\\n///\\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\\n///  $im-media-support: false;\\n///  $im-no-media-breakpoint: 'desktop';\\n///  $im-no-media-expressions: ('screen');\\n///  @include media('>=tablet', 'screen') {\\n///    .foo {\\n///      color: tomato;\\n///    }\\n///  }\\n///\\n///   /* Generates: */\\n///   .foo {\\n///     color: tomato;\\n///   }\\n///\\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\\n///  $im-media-support: false;\\n///  $im-no-media-breakpoint: 'desktop';\\n///  $im-no-media-expressions: ('screen');\\n///  @include media('>=tablet', 'retina2x') {\\n///    .foo {\\n///      color: tomato;\\n///    }\\n///  }\\n///\\n///  /* No output */\\n///\\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\\n\\n////\\n/// Cross-engine logging engine\\n/// @author Kitty Giraudel\\n/// @access private\\n////\\n\\n\\n///\\n/// Log a message either with `@error` if supported\\n/// else with `@warn`, using `feature-exists('at-error')`\\n/// to detect support.\\n///\\n/// @param {String} $message - Message to log\\n///\\n@function im-log($message) {\\n  @if feature-exists('at-error') {\\n    @error $message;\\n  } @else {\\n    @warn $message;\\n    $_: noop();\\n  }\\n\\n  @return $message;\\n}\\n\\n\\n///\\n/// Wrapper mixin for the log function so it can be used with a more friendly\\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\\n/// within functions because it is not possible to include a mixin in a function\\n/// and use the mixin everywhere else because it's much more elegant.\\n///\\n/// @param {String} $message - Message to log\\n///\\n@mixin log($message) {\\n  @if im-log($message) {}\\n}\\n\\n\\n///\\n/// Function with no `@return` called next to `@warn` in Sass 3.3\\n/// to trigger a compiling error and stop the process.\\n///\\n@function noop() {}\\n\\n///\\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\\n///\\n/// @param {Arglist}   $conditions  - Media query conditions\\n///\\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\\n///\\n@function im-intercepts-static-breakpoint($conditions...) {\\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\\n\\n  @if not $no-media-breakpoint-value {\\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\\n  }\\n\\n  @each $condition in $conditions {\\n    @if not map-has-key($media-expressions, $condition) {\\n      $operator: get-expression-operator($condition);\\n      $prefix: get-expression-prefix($operator);\\n      $value: get-expression-value($condition, $operator);\\n\\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\\n        @return false;\\n      }\\n    } @else if not index($im-no-media-expressions, $condition) {\\n      @return false;\\n    }\\n  }\\n\\n  @return true;\\n}\\n\\n////\\n/// Parsing engine\\n/// @author Kitty Giraudel\\n/// @access private\\n////\\n\\n\\n///\\n/// Get operator of an expression\\n///\\n/// @param {String} $expression - Expression to extract operator from\\n///\\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\\n///\\n@function get-expression-operator($expression) {\\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\\n    @if str-index($expression, $operator) {\\n      @return $operator;\\n    }\\n  }\\n\\n  // It is not possible to include a mixin inside a function, so we have to\\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\\n  // functions cannot be called anywhere in Sass, we need to hack the call in\\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\\n  $_: im-log('No operator found in `#{$expression}`.');\\n}\\n\\n\\n///\\n/// Get dimension of an expression, based on a found operator\\n///\\n/// @param {String} $expression - Expression to extract dimension from\\n/// @param {String} $operator - Operator from `$expression`\\n///\\n/// @return {String} - `width` or `height` (or potentially anything else)\\n///\\n@function get-expression-dimension($expression, $operator) {\\n  $operator-index: str-index($expression, $operator);\\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\\n  $dimension: 'width';\\n\\n  @if str-length($parsed-dimension) > 0 {\\n    $dimension: $parsed-dimension;\\n  }\\n\\n  @return $dimension;\\n}\\n\\n\\n///\\n/// Get dimension prefix based on an operator\\n///\\n/// @param {String} $operator - Operator\\n///\\n/// @return {String} - `min` or `max`\\n///\\n@function get-expression-prefix($operator) {\\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\\n}\\n\\n\\n///\\n/// Get value of an expression, based on a found operator\\n///\\n/// @param {String} $expression - Expression to extract value from\\n/// @param {String} $operator - Operator from `$expression`\\n///\\n/// @return {Number} - A numeric value\\n///\\n@function get-expression-value($expression, $operator) {\\n  $operator-index: str-index($expression, $operator);\\n  $value: str-slice($expression, $operator-index + str-length($operator));\\n\\n  @if map-has-key($breakpoints, $value) {\\n    $value: map-get($breakpoints, $value);\\n  } @else {\\n    $value: to-number($value);\\n  }\\n\\n  $interval: map-get($unit-intervals, unit($value));\\n\\n  @if not $interval {\\n    // It is not possible to include a mixin inside a function, so we have to\\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\\n    // functions cannot be called anywhere in Sass, we need to hack the call in\\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\\n    $_: im-log('Unknown unit `#{unit($value)}`.');\\n  }\\n\\n  @if $operator == '>' {\\n    $value: $value + $interval;\\n  } @else if $operator == '<' {\\n    $value: $value - $interval;\\n  }\\n\\n  @return $value;\\n}\\n\\n\\n///\\n/// Parse an expression to return a valid media-query expression\\n///\\n/// @param {String} $expression - Expression to parse\\n///\\n/// @return {String} - Valid media query\\n///\\n@function parse-expression($expression) {\\n  // If it is part of $media-expressions, it has no operator\\n  // then there is no need to go any further, just return the value\\n  @if map-has-key($media-expressions, $expression) {\\n    @return map-get($media-expressions, $expression);\\n  }\\n\\n  $operator: get-expression-operator($expression);\\n  $dimension: get-expression-dimension($expression, $operator);\\n  $prefix: get-expression-prefix($operator);\\n  $value: get-expression-value($expression, $operator);\\n\\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\\n}\\n\\n///\\n/// Slice `$list` between `$start` and `$end` indexes\\n///\\n/// @access private\\n///\\n/// @param {List} $list - List to slice\\n/// @param {Number} $start [1] - Start index\\n/// @param {Number} $end [length($list)] - End index\\n///\\n/// @return {List} Sliced list\\n///\\n@function slice($list, $start: 1, $end: length($list)) {\\n  @if length($list) < 1 or $start > $end {\\n    @return ();\\n  }\\n\\n  $result: ();\\n\\n  @for $i from $start through $end {\\n    $result: append($result, nth($list, $i));\\n  }\\n\\n  @return $result;\\n}\\n\\n////\\n/// String to number converter\\n/// @author Kitty Giraudel\\n/// @access private\\n////\\n\\n\\n///\\n/// Casts a string into a number\\n///\\n/// @param {String | Number} $value - Value to be parsed\\n///\\n/// @return {Number}\\n///\\n@function to-number($value) {\\n  @if type-of($value) == 'number' {\\n    @return $value;\\n  } @else if type-of($value) != 'string' {\\n    $_: im-log('Value for `to-number` should be a number or a string.');\\n  }\\n\\n  $first-character: str-slice($value, 1, 1);\\n  $result: 0;\\n  $digits: 0;\\n  $minus: ($first-character == '-');\\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\\n\\n  // Remove +/- sign if present at first character\\n  @if ($first-character == '+' or $first-character == '-') {\\n    $value: str-slice($value, 2);\\n  }\\n\\n  @for $i from 1 through str-length($value) {\\n    $character: str-slice($value, $i, $i);\\n\\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\\n    }\\n\\n    @if $character == '.' {\\n      $digits: 1;\\n    } @else if $digits == 0 {\\n      $result: $result * 10 + map-get($numbers, $character);\\n    } @else {\\n      $digits: $digits * 10;\\n      $result: $result + map-get($numbers, $character) / $digits;\\n    }\\n  }\\n\\n  @return if($minus, -$result, $result);\\n}\\n\\n\\n///\\n/// Add `$unit` to `$value`\\n///\\n/// @param {Number} $value - Value to add unit to\\n/// @param {String} $unit - String representation of the unit\\n///\\n/// @return {Number} - `$value` expressed in `$unit`\\n///\\n@function to-length($value, $unit) {\\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\\n\\n  @if not index(map-keys($units), $unit) {\\n    $_: im-log('Invalid unit `#{$unit}`.');\\n  }\\n\\n  @return $value * map-get($units, $unit);\\n}\\n\\n///\\n/// This mixin aims at redefining the configuration just for the scope of\\n/// the call. It is helpful when having a component needing an extended\\n/// configuration such as custom breakpoints (referred to as tweakpoints)\\n/// for instance.\\n///\\n/// @author Kitty Giraudel\\n///\\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\\n///\\n/// @example scss - Extend the global breakpoints with a tweakpoint\\n///  @include media-context(('custom': 678px)) {\\n///    .foo {\\n///      @include media('>phone', '<=custom') {\\n///       // ...\\n///      }\\n///    }\\n///  }\\n///\\n/// @example scss - Extend the global media expressions with a custom one\\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\\n///    .foo {\\n///      @include media('all', '>phone') {\\n///       // ...\\n///      }\\n///    }\\n///  }\\n///\\n/// @example scss - Extend both configuration maps\\n///  @include media-context(('custom': 678px), ('all': 'all')) {\\n///    .foo {\\n///      @include media('all', '>phone', '<=custom') {\\n///       // ...\\n///      }\\n///    }\\n///  }\\n///\\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\\n  // Save global configuration\\n  $global-breakpoints: $breakpoints;\\n  $global-media-expressions: $media-expressions;\\n\\n  // Update global configuration\\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\\n\\n  @content;\\n\\n  // Restore global configuration\\n  $breakpoints: $global-breakpoints !global;\\n  $media-expressions: $global-media-expressions !global;\\n}\\n\\n////\\n/// include-media public exposed API\\n/// @author Eduardo Boucas\\n/// @access public\\n////\\n\\n\\n///\\n/// Generates a media query based on a list of conditions\\n///\\n/// @param {Arglist}   $conditions  - Media query conditions\\n///\\n/// @example scss - With a single set breakpoint\\n///  @include media('>phone') { }\\n///\\n/// @example scss - With two set breakpoints\\n///  @include media('>phone', '<=tablet') { }\\n///\\n/// @example scss - With custom values\\n///  @include media('>=358px', '<850px') { }\\n///\\n/// @example scss - With set breakpoints with custom values\\n///  @include media('>desktop', '<=1350px') { }\\n///\\n/// @example scss - With a static expression\\n///  @include media('retina2x') { }\\n///\\n/// @example scss - Mixing everything\\n///  @include media('>=350px', '<tablet', 'retina3x') { }\\n///\\n@mixin media($conditions...) {\\n  @if ($im-media-support and length($conditions) == 0) or\\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\\n    @content;\\n  } @else if ($im-media-support and length($conditions) > 0) {\\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\\n      // Recursive call\\n      @include media(slice($conditions, 2)...) {\\n        @content;\\n      }\\n    }\\n  }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"root\": \"AdviceAndTest_root__wQ3WX\",\n\t\"wrapper\": \"AdviceAndTest_wrapper__plcsR\",\n\t\"contentAbout\": \"AdviceAndTest_contentAbout__8VjeW\",\n\t\"contentBanner\": \"AdviceAndTest_contentBanner__tCSpb\",\n\t\"title\": \"AdviceAndTest_title__qNeIE\",\n\t\"text\": \"AdviceAndTest_text__DDy4q\",\n\t\"buttonModal\": \"AdviceAndTest_buttonModal__RFY2C\",\n\t\"roundArrow\": \"AdviceAndTest_roundArrow__YGajT\"\n};\nmodule.exports = ___CSS_LOADER_EXPORT___;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[7].use[4]!./features/app/UI/AdviceAndTest/AdviceAndTest.module.scss\n"));

/***/ })

});